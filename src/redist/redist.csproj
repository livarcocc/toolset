<Project Sdk="Microsoft.NET.Sdk" ToolsVersion="15.0">
  <PropertyGroup>
    <VersionPrefix>$(CliVersionPrefix)</VersionPrefix>
    <TargetFramework>$(ToolsetTargetFramework)</TargetFramework>
    <GenerateRuntimeConfigurationFiles>true</GenerateRuntimeConfigurationFiles>
    <CopyBuildOutputToPublishDirectory>false</CopyBuildOutputToPublishDirectory>
    <AssetTargetFallback>dotnet5.4</AssetTargetFallback>
    <VersionSuffix>$(CommitCount)</VersionSuffix>
    <RoslynDirectory>$(OutputPath)/Roslyn</RoslynDirectory>
    <FSharpDirectory>$(OutputPath)/FSharp</FSharpDirectory>
  </PropertyGroup>

  <Import Project="targets\BuildToolsetTasks.targets" />

  <ItemGroup>
    <PackageReference Include="NuGet.Build.Tasks" Version="$(NuGetBuildTasksPackageVersion)" />
    <PackageReference Include="Microsoft.Build.NuGetSdkResolver" Version="$(MicrosoftBuildNuGetSdkResolverPackageVersion)" />
    <PackageReference Include="Microsoft.TestPlatform.CLI" Version="$(MicrosoftTestPlatformCLIPackageVersion)" />
    <PackageReference Include="Microsoft.TestPlatform.Build" Version="$(MicrosoftTestPlatformBuildPackageVersion)" />
    <PackageReference Condition=" '$(DotNetBuildFromSource)' != 'true' " Include="NuGet.Localization" Version="$(NuGetProjectModelPackageVersion)" />
    <PackageReference Include="NuGet.ProjectModel" Version="$(NuGetProjectModelPackageVersion)" />
    <PackageReference Include="Microsoft.NETCore.Compilers" Version="$(MicrosoftNETCoreCompilersPackageVersion)">
      <ExcludeAssets>All</ExcludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\tool_msbuild\tool_msbuild.csproj" />
    <ProjectReference Include="..\tool_cli\tool_cli.csproj" />
    <ProjectReference Include="..\tool_nuget\tool_nuget.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="minimumMSBuildVersion">
      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
    </Content>
  </ItemGroup>

  <Target Name="PublishVersionFile"
          BeforeTargets="Build;Publish">

    <WriteLinesToFile File="$(OutputPath)/.toolsetversion"
                      Lines="$(CommitHash);$(SdkVersion);$(Rid)"
                      Overwrite="true" />
  </Target>

  <Target Name="PublishRoslyn"
          BeforeTargets="Build;Publish">
    <ItemGroup>
      <RoslynBits Include="$(NuGetPackagesDir)/microsoft.netcore.compilers/$(MicrosoftNETCoreCompilersPackageVersion)/tools/**/*" />
    </ItemGroup>
    <Copy SourceFiles="@(RoslynBits)" DestinationFiles="@(RoslynBits->'$(RoslynDirectory)/%(RecursiveDir)%(Filename)%(Extension)')" />
    <ItemGroup>
      <RoslynFrameworkAssemblies Include="$(RoslynDirectory)/System.*.dll;$(RoslynDirectory)/runtimes/**/System.*.dll" Exclude="$(RoslynDirectory)/runtimes/**/System.IO.Pipes.AccessControl.dll"/>
    </ItemGroup>
    <Delete Files="@(RoslynFrameworkAssemblies)" />
  </Target>

  <Target Name="PublishFSharp"
          BeforeTargets="Build;Publish">
    <MSBuild 
      Targets="Publish"
      Projects="$(SrcDirectory)/tool_fsharp/tool_fsc.csproj"
      Properties="Configuration=$(Configuration);PublishDir=$(OutputPath)/FSharp" />
  </Target>

  <Target Name="GenerateCliRuntimeConfigurationFiles"
          AfterTargets="Build;Publish">
    <RemoveAssetFromDepsPackages DepsFile="$(OutputPath)/$(TargetName).deps.json"
                                 SectionName="runtime"
                                 AssetPath="%(BundledToolProjects.Identity).dll" />

    <Copy SourceFiles="$(OutputPath)/$(TargetName).deps.json"
          DestinationFiles="$(OutputPath)/%(BundledTools.Identity).deps.json" />

    <Copy SourceFiles="$(OutputPath)/$(TargetName).runtimeconfig.json"
          DestinationFiles="$(OutputPath)/%(BundledTools.Identity).runtimeconfig.json" />

    <Delete Files="$(OutputPath)/$(TargetName).deps.json;
                   $(OutputPath)/$(TargetName).runtimeconfig.json;
                   $(OutputPath)/%(BundledToolProjects.Identity).dll;
                   $(OutputPath)/%(BundledToolProjects.Identity).pdb" />

    <ChangeEntryPointLibraryName
          DepsFile="$(OutputPath)/%(BundledTools.Identity).deps.json"
          NewName="%(BundledTools.Identity).deps.json" />
  </Target>

  <Target Name="MakeFscRunnableAndMoveToPublishDir"
          AfterTargets="Build;Publish"
          BeforeTargets="RemoveFilesAfterPublish">

    <ItemGroup>
      <AssetsToRemoveFromDeps Include="tool_fsc.dll" 
                              SectionName="runtime"/>
    </ItemGroup>

    <RemoveAssetFromDepsPackages DepsFile="$(FSharpDirectory)/tool_fsc.deps.json"
                                 SectionName="%(AssetsToRemoveFromDeps.SectionName)"
                                 AssetPath="%(AssetsToRemoveFromDeps.Identity)" />

    <Message Text="PATH = $(FSharpDirectory)" Importance="High" />

    <!-- Deploy deps and runtime config for fsc.exe and fsi.exe.  Both apps have exactly the same dependencies so this is Ok -->
    <Copy SourceFiles="$(FSharpDirectory)/tool_fsc.runtimeconfig.json;
                       $(FSharpDirectory)/tool_fsc.deps.json;"
          DestinationFiles="$(FSharpDirectory)/fsc.runtimeconfig.json;
                            $(FSharpDirectory)/fsc.deps.json;"/>
    <Copy SourceFiles="$(FSharpDirectory)/tool_fsc.runtimeconfig.json;
                       $(FSharpDirectory)/tool_fsc.deps.json;"
          DestinationFiles="$(FSharpDirectory)/fsi.runtimeconfig.json;
                            $(FSharpDirectory)/fsi.deps.json;"/>
  </Target>

  <Target Name="RemoveFscFilesAfterPublish"
          AfterTargets="Build;Publish">
    <Delete Files="$(FSharpDirectory)/tool_fsc.dll" />
    <Delete Files="$(FSharpDirectory)/tool_fsc.pdb" />
    <Delete Files="$(FSharpDirectory)/tool_fsc.runtimeconfig.json" />
    <Delete Files="$(FSharpDirectory)/tool_fsc.deps.json" />
  </Target>

  <Target Name="PublishTargetExtensions"
          AfterTargets="Build;Publish"
          BeforeTargets="GenerateCliRuntimeConfigurationFiles">
      <PropertyGroup>
        <MSBuildTargetsDirectory>$(OutputPath)/runtimes/any/native</MSBuildTargetsDirectory>
      </PropertyGroup>

      <ItemGroup>
        <NuPkgContentForMSBuildExtensions Include="
          $(MSBuildTargetsDirectory)/**/*.targets;
          $(MSBuildTargetsDirectory)/**/*.props;
          $(MSBuildTargetsDirectory)/**/*.overridetasks;
          $(MSBuildTargetsDirectory)/**/*.tasks" />

        <NuPkgContentForMSBuildExtensionsRelativePaths Include="@(NuPkgContentForMSBuildExtensions->'runtimes/any/native/%(RecursiveDir)%(Filename)%(Extension)')" />
      </ItemGroup>

      <Move SourceFiles="@(NuPkgContentForMSBuildExtensions)"
            DestinationFiles="@(NuPkgContentForMSBuildExtensions->'$(OutputPath)/%(RecursiveDir)%(Filename)%(Extension)')" />

      <RemoveAssetFromDepsPackages DepsFile="$(OutputPath)/$(TargetName).deps.json"
                                   SectionName="runtimeTargets"
                                   AssetPath="%(NuPkgContentForMSBuildExtensionsRelativePaths.Identity)" />
  </Target>

  <!-- The msdia140typelib_clr0200.dll file is not MIT licensed (and it only used on Windows). Remove it, so
       we can MIT license the published dotnet -->
  <Target Name="RemoveMSDiaTypeLib"
          AfterTargets="Build;Publish"
          Condition="'$(OSName)' != 'win'">
    <Delete Files="$(OutputPath)/TestHost/msdia140typelib_clr0200.dll" />
  </Target>

  <Target Name="PublishSdks"
          AfterTargets="Build;Publish">
    <ItemGroup>
      <SdksToBundle Include="$(RepoRoot)/build/RestoreDependency.proj">
        <Properties>
          CLIBuildDll=$(CLIBuildDll);
          NuGetPackagesDir=$(NuGetPackagesDir);
          SdkLayoutDirectory=$(ToolsetOutputDirectory)/Sdks/%(BundledSdk.Identity);
          DependencyPackageName=%(BundledSdk.Identity);
          DependencyPackageVersion=%(BundledSdk.Version);
          PreviousStageDirectory=$(PreviousStageDirectory)
        </Properties>
      </SdksToBundle>
    </ItemGroup>

    <MSBuild
      BuildInParallel="False"
      Projects="@(SdksToBundle)">
    </MSBuild>

    <!-- The WPF SDK .nupkg includes some files in the root that we don't want to bundle, so delete them -->
    <ItemGroup>
      <SDKFilesToDelete Include="$(ToolsetOutputDirectory)/Sdks/Microsoft.NET.Sdk.Wpf/*" />
    </ItemGroup>
    <Delete Files="@(SDKFilesToDelete)" />
  </Target>

  <Target Name="ChmodPublishDir"
          AfterTargets="GenerateCliRuntimeConfigurationFiles"
          Condition=" '$(OSName)' != 'win' ">

    <Exec Command="find $(ToolsetOutputDirectory) -type d -exec chmod 755 {} \;" />
    <Exec Command="find $(ToolsetOutputDirectory) -type f -exec chmod 644 {} \;" />
    <Chmod Mode="755" Glob="$(ToolsetOutputDirectory)/FSharp/RunFsc.sh" />
  </Target>

  <Target Name="DeleteSymbolsFromPublishDir"
          AfterTargets="GenerateCliRuntimeConfigurationFiles">
    <ItemGroup>
      <PdbsToDelete Include="$(OutputPath)/**/*.pdb" />
      <PdbsToDelete Include="$(OutputPath)/**/*.ni.*.map" />
    </ItemGroup>

    <Delete Files="@(PdbsToDelete)" />
  </Target>

  <Target Name="RetargetTools"
          BeforeTargets="PublishStage2WithBackwardsCompatibleRuntimes"
          AfterTargets="Build;Publish">
    <PropertyGroup>
      <ReplacementPattern>"version": ".*"</ReplacementPattern>
      <ReplacementString>"version": "$(BundledNETCoreAppPackageVersion)"</ReplacementString>
    </PropertyGroup>
    <ItemGroup>
      <ToolRuntimeConfigPath Include="$(OutputPath)/**/*.runtimeconfig.json" />

      <MSBuild15Items Include="$(OutputPath)/15.0/**/*" />
    </ItemGroup>
    <ReplaceFileContents
      InputFiles="@(ToolRuntimeConfigPath)"
      DestinationFiles="@(ToolRuntimeConfigPath)"
      ReplacementPatterns="$(ReplacementPattern)"
      ReplacementStrings="$(ReplacementString)" />

    <Move
      SourceFiles="@(MSBuild15Items)"
      DestinationFiles="@(MSBuild15Items -> '$(OutputPath)/Current/%(RecursiveDir)%(Filename)%(Extension)')" />

    <RemoveDir Directories="$(OutputPath)/15.0" />
  </Target>

  <Target Name="CopyBundledVersions"
          AfterTargets="Build;Publish">

    <Copy SourceFiles="$(PreviousStageBundledVersions)"
          DestinationFolder="$(OutputPath)"/>
    
  </Target>
</Project>
